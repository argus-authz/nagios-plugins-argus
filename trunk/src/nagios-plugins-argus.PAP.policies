#!/usr/bin/env python
#############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2006-2010.
# See http://www.eu-egee.org/partners/ for details on the copyright holders.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
#     Joel Casutt     - joel.casutt@switch.ch
#############################################################################
'''
Created on 4/jan/2012

@author: joelcasutt
'''
from framework.Probe import ArgusProbe
import signal

class PAPPolicyProbe( ArgusProbe ):
   
    DEFAULT_PORT = 8150

    def __init__( self, serviceName, clientAuth ):
        super(PAPPolicyProbe, self).__init__(serviceName, clientAuth)
        
    def getURLTemplate( self ):
        return "https://%(hostname)s:%(port)s/pap/status"
        
    def check( self ):
        status = ArgusProbe.getStatus( self )
        if not status['Service'] == self.getServiceName():
            self.nagios_critical("the answering service is not a %s" % self.getServiceName())
        if status['NumberOfPolicies'] != None and status['PolicyLastModificationTime'] != None:
            self.nagios_ok(status['Service'] + " " + status['ServiceVersion'] + ": Nr. of policies: " + \
                           status['NumberOfPolicies'] + " (Policies Modified on: " + status['PolicyLastModificationTime'] + ")" + \
                           " | NumberOfPolicies=%s;" % status['NumberOfPolicies'])
        else:
            self.nagios_critical("Could not find data relating to policy-numbers or startup-time.")
        
def main():
    probe = PAPPolicyProbe("Argus PAP", True)
    probe.createParser()
    probe.readOptions()
    probe.check()
    
if __name__ == '__main__':
    main()